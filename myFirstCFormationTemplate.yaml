AWSTemplateFormatVersion: 2010-09-09
Description: Creating 2 EC2 instances, Target Group, and NLB with CloudFormation


Resources:
  PraneethEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-024fc608af8f886bc
      InstanceType: t2.micro
      KeyName: praneeth
      Tags:
        - Key: Name
          Value: praneeth-ec2-instances
      Volumes:
        - Device: /dev/sdh
          VolumeId: !Ref PraneethEBSVolume1
      SecurityGroups:
        - !Ref praneethInstanceSG

  PraneethEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-024fc608af8f886bc
      InstanceType: t2.micro
      KeyName: praneeth
      Tags:
        - Key: Name
          Value: praneeth-ec2-instances
      Volumes:
        - Device: /dev/sdh
          VolumeId: !Ref PraneethEBSVolume2
      SecurityGroups:
        - !Ref praneethInstanceSG

  praneethInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PraneethEBSVolume1:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-east-1a
      Size: 5
      Tags:
        - Key: Name
          Value: praneeth-ebs-vol

  PraneethEBSVolume2:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-east-1a
      Size: 6
      Tags:
        - Key: Name
          Value: praneeth-ebs-vol
  
  praneethS3Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: praneeth-s3-buckett

  praneethRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: praneeth-s3-policy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to provide access to S3
      Policies:
        - PolicyName: praneeth-s3-bucket1-read-write-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                    - s3:GetBucketLocation
                    - s3:ListAllMyBuckets
                  Resource: "*"
                - Effect: Allow
                  Action:
                  - s3:ListBucket
                  Resource:
                  - arn:aws:s3:::test
                - Effect: Allow
                  Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  Resource:
                  - !Sub arn:aws:s3:::${praneethS3Bucket1}
                  - !Sub arn:aws:s3:::${praneethS3Bucket1}/*

  praneethELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: praneeth-nlb1
      # IpAddressType: ip4   
      Type: network
      Subnets: 
        - subnet-031d506adca4ad569
        #- subnet-01ca31a93d3effd5b
      
  praneethTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: praneeth-TG1
      Port: 80
      Protocol: TCP
      Targets: 
        - Id: !Ref PraneethEC2Instance1
          Port: 80
        - Id: !Ref PraneethEC2Instance2
          Port: 80
      VpcId: vpc-0629ff7307588156b

  PraneethNLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref praneethTG
      LoadBalancerArn: !Ref praneethELB
      Port: 80
      Protocol: TCP

Outputs:
  praneethOutput1:
    Description: DNSName of ELB
    Value: !GetAtt praneethELB.DNSName




