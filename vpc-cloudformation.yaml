AWSTemplateFormatVersion: 2010-09-09
Description: "Creating VPC with a pair of public and private subnets spread across two Availability Zones.
Created Network ACLs along with rules. Also deploys an internet gateway, NAT gateway, Route Tables along with routes."

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/21

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      # EnableDnsSupport: true
      # EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

  myNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: myInternetGatewayAttachment
    Properties:
      Domain: vpc

  myNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt myNatGatewayEIP.AllocationId
      SubnetId: !Ref myPublicSubnet1

  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      # AvailabilityZone: !Select [ 0, !GetAZs '' ]
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-subnet-us-east-1a
          # Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      # AvailabilityZone: !Select [ 0, !GetAZs '' ]
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-subnet-us-east-1b

  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-us-east-1a

  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-us-east-1b

  myNetworkAcl1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref myVPC
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-pub-nacl

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myNetworkAcl1
      SubnetId: !Ref myPublicSubnet1

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myNetworkAcl1
      SubnetId: !Ref myPublicSubnet2
  
  myNACL1InboundRuleSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl1
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
  
  myNACL1InboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl1
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  
  myNACL1InboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl1
       RuleNumber: 120
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  myNACL1OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl1
       RuleNumber: 200
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  myNetworkAcl2:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref myVPC
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-private-nacl

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myNetworkAcl2
      SubnetId: !Ref myPrivateSubnet1

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myNetworkAcl2
      SubnetId: !Ref myPrivateSubnet2

  myNACL2InboundRuleSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl2
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 10.1.0.0/23
       PortRange:
         From: 22
         To: 22

  myNACL2OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref myNetworkAcl2
       RuleNumber: 200
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  myPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-rt-us-east-1

  myPubRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGatewayAttachment
    Properties:
       RouteTableId: !Ref myPublicRouteTable1
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref myInternetGateway

  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable1
      SubnetId: !Ref myPublicSubnet1

  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable1
      SubnetId: !Ref myPublicSubnet2

  myPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-rt-us-east-1

  myPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref myNatGateway

  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      SubnetId: !Ref myPrivateSubnet1

  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      SubnetId: !Ref myPrivateSubnet2